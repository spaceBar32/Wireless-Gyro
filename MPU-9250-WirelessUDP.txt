#include <ESP8266WiFi.h>
#include <WiFiUdp.h>
#include "quaternionFilters.h"
#include "MPU9250.h"

// Pin definitions
int intPin = 12;  // These can be changed, 2 and 3 are the Arduinos ext int pins
#define I2Cclock 400000
#define I2Cport Wire
#define MPU9250_ADDRESS MPU9250_ADDRESS_AD0   // Use either this line or the next to select which I2C address your device is using

//#define MPU9250_ADDRESS MPU9250_ADDRESS_AD1
#ifndef STASSID
#define STASSID ""
#define STAPSK  ""
#endif

unsigned int localPort = 4209;      // local port to listen on
unsigned int dest_port = 4211;

// buffers for receiving and sending data
char packetBuffer[UDP_TX_PACKET_MAX_SIZE + 1]; //buffer to hold incoming packet,
char  ReplyBuffer[] = "acknowledged TEST\r\n";       // a string to send back
char  ue4Buffer[] = "";       // Send Data to Unreal

WiFiUDP Udp;

MPU9250 myIMU(MPU9250_ADDRESS, I2Cport, I2Cclock);

//Send UE4--------------------------
String gX;
String gY;
String gZ;
String ue4Mesg;
//Send UE4--------------------------

//SmoothingData---------------------------------
// Define the number of samples to keep track of. The higher the number, the
// more the readings will be smoothed, but the slower the output will respond to
// the input. Using a constant rather than a normal variable lets us use this
// value to determine the size of the readings array.
const int numReadings = 5;

float readingsRoll[numReadings];      // the readings from the analog input
int readIndexRoll = 0;              // the index of the current reading
float totalRoll = 0;                  // the running total
float averageRoll = 0;                // the average

float readingsPitch[numReadings];      // the readings from the analog input
int readIndexPitch = 0;              // the index of the current reading
float totalPitch = 0;                  // the running total
float averagePitch = 0;                // the average

float readingsYaw[numReadings];      // the readings from the analog input
int readIndexYaw = 0;              // the index of the current reading
float totalYaw = 0;                  // the running total
float averageYaw = 0;                // the average

//SmoothingData---------------------------------


void setup()
{
  // initialize digital pin LED_BUILTIN as an output.
  pinMode(LED_BUILTIN, OUTPUT);

  WiFi.mode(WIFI_STA);
  WiFi.begin(STASSID, STAPSK);
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print('.');
    delay(500);
  }

  Serial.print("Connected! IP address: ");
  Serial.println(WiFi.localIP());
  Serial.printf("UDP server on port %d\n", localPort);
  Udp.begin(localPort);
  delay(3000);

  Wire.begin();


  // TWBR = 12;  // 400 kbit/sec I2C speed
  Serial.begin(115200);

  while (!Serial) {};

  // Read the WHO_AM_I register, this is a good test of communication
  byte c = myIMU.readByte(MPU9250_ADDRESS, WHO_AM_I_MPU9250);
  Serial.print(F("MPU9250 I AM 0x"));
  Serial.print(c, HEX);
  Serial.print(F(" I should be 0x"));
  Serial.println(0x71, HEX);


  if (c == 0x71) // WHO_AM_I should always be 0x71
  {
    Serial.println(F("MPU9250 is online..."));


    // Calibrate gyro and accelerometers, load biases in bias registers
    myIMU.calibrateMPU9250(myIMU.gyroBias, myIMU.accelBias);

    myIMU.initMPU9250();
    // Initialize device for active mode read of acclerometer, gyroscope, and
    // temperature
    Serial.println("MPU9250 initialized for active data mode....");

    // Read the WHO_AM_I register of the magnetometer, this is a good test of
    // communication
    byte d = myIMU.readByte(AK8963_ADDRESS, WHO_AM_I_AK8963);
    Serial.print("AK8963 ");
    Serial.print("I AM 0x");
    Serial.print(d, HEX);
    Serial.print(" I should be 0x");
    Serial.println(0x48, HEX);


    if (d != 0x48)
    {
      // Communication failed, stop here
      Serial.println(F("Communication failed, abort!"));
      Serial.flush();
      abort();
    }

    // Get magnetometer calibration from AK8963 ROM
    myIMU.initAK8963(myIMU.factoryMagCalibration);
    // Initialize device for active mode read of magnetometer
    Serial.println("AK8963 initialized for active data mode....");


    //  Serial.println("Calibration values: ");
    Serial.print("X-Axis factory sensitivity adjustment value ");
    Serial.println(myIMU.factoryMagCalibration[0], 2);
    Serial.print("Y-Axis factory sensitivity adjustment value ");
    Serial.println(myIMU.factoryMagCalibration[1], 2);
    Serial.print("Z-Axis factory sensitivity adjustment value ");
    Serial.println(myIMU.factoryMagCalibration[2], 2);


    // Get sensor resolutions, only need to do this once
    myIMU.getAres();
    myIMU.getGres();
    myIMU.getMres();

    // The next call delays for 4 seconds, and then records about 15 seconds of
    // data to calculate bias and scale.
    //    myIMU.magCalMPU9250(myIMU.magBias, myIMU.magScale);
    Serial.println("AK8963 mag biases (mG)");
    Serial.println(myIMU.magBias[0]);
    Serial.println(myIMU.magBias[1]);
    Serial.println(myIMU.magBias[2]);

    Serial.println("AK8963 mag scale (mG)");
    Serial.println(myIMU.magScale[0]);
    Serial.println(myIMU.magScale[1]);
    Serial.println(myIMU.magScale[2]);
    delay(5000); // Add delay to see results before serial spew of data


    Serial.println("Magnetometer:");
    Serial.print("X-Axis sensitivity adjustment value ");
    Serial.println(myIMU.factoryMagCalibration[0], 2);
    Serial.print("Y-Axis sensitivity adjustment value ");
    Serial.println(myIMU.factoryMagCalibration[1], 2);
    Serial.print("Z-Axis sensitivity adjustment value ");
    Serial.println(myIMU.factoryMagCalibration[2], 2);


  } // if (c == 0x71)
  else
  {
    Serial.print("Could not connect to MPU9250: 0x");
    Serial.println(c, HEX);

    // Communication failed, stop here
    Serial.println(F("Communication failed, abort!"));
    Serial.flush();
    abort();
  }

  //SmoothingData---------------------------------

  // initialize all the readings to 0:
  for (int thisReadingRoll = 0; thisReadingRoll < numReadings; thisReadingRoll++) {
    readingsRoll[thisReadingRoll] = 0;
  }

  for (int thisReadingPitch = 0; thisReadingPitch < numReadings; thisReadingPitch++) {
    readingsPitch[thisReadingPitch] = 0;
  }

  for (int thisReadingYaw = 0; thisReadingYaw < numReadings; thisReadingYaw++) {
    readingsYaw[thisReadingYaw] = 0;
  }
  //SmoothingData---------------------------------

  Serial.print("Connected! IP address: ");
  Serial.println(WiFi.localIP());
  Serial.printf("UDP server on port %d\n", localPort);
  delay(3000);
}





void loop()
{

  // If intPin goes high, all data registers have new data
  // On interrupt, check if data ready interrupt
  if (myIMU.readByte(MPU9250_ADDRESS, INT_STATUS) & 0x01)
  {
    myIMU.readAccelData(myIMU.accelCount);  // Read the x/y/z adc values

    // Now we'll calculate the accleration value into actual g's
    // This depends on scale being set
    myIMU.ax = (float)myIMU.accelCount[0] * myIMU.aRes; // - myIMU.accelBias[0];
    myIMU.ay = (float)myIMU.accelCount[1] * myIMU.aRes; // - myIMU.accelBias[1];
    myIMU.az = (float)myIMU.accelCount[2] * myIMU.aRes; // - myIMU.accelBias[2];

    myIMU.readGyroData(myIMU.gyroCount);  // Read the x/y/z adc values

    // Calculate the gyro value into actual degrees per second
    // This depends on scale being set
    myIMU.gx = (float)myIMU.gyroCount[0] * myIMU.gRes;
    myIMU.gy = (float)myIMU.gyroCount[1] * myIMU.gRes;
    myIMU.gz = (float)myIMU.gyroCount[2] * myIMU.gRes;

    myIMU.readMagData(myIMU.magCount);  // Read the x/y/z adc values

    // Calculate the magnetometer values in milliGauss
    // Include factory calibration per data sheet and user environmental
    // corrections
    // Get actual magnetometer value, this depends on scale being set
    myIMU.mx = (float)myIMU.magCount[0] * myIMU.mRes
               * myIMU.factoryMagCalibration[0] - myIMU.magBias[0];
    myIMU.my = (float)myIMU.magCount[1] * myIMU.mRes
               * myIMU.factoryMagCalibration[1] - myIMU.magBias[1];
    myIMU.mz = (float)myIMU.magCount[2] * myIMU.mRes
               * myIMU.factoryMagCalibration[2] - myIMU.magBias[2];
  } // if (readByte(MPU9250_ADDRESS, INT_STATUS) & 0x01)

  // Must be called before updating quaternions!
  myIMU.updateTime();

  // Sensors x (y)-axis of the accelerometer is aligned with the y (x)-axis of
  // the magnetometer; the magnetometer z-axis (+ down) is opposite to z-axis
  // (+ up) of accelerometer and gyro! We have to make some allowance for this
  // orientationmismatch in feeding the output to the quaternion filter. For the
  // MPU-9250, we have chosen a magnetic rotation that keeps the sensor forward
  // along the x-axis just like in the LSM9DS0 sensor. This rotation can be
  // modified to allow any convenient orientation convention. This is ok by
  // aircraft orientation standards! Pass gyro rate as rad/s

  MahonyQuaternionUpdate(myIMU.ax, myIMU.ay, myIMU.az, myIMU.gx * DEG_TO_RAD,
                         myIMU.gy * DEG_TO_RAD, myIMU.gz * DEG_TO_RAD, myIMU.my,
                         myIMU.mx, myIMU.mz, myIMU.deltat);



  // Define output variables from updated quaternion---these are Tait-Bryan
  // angles, commonly used in aircraft orientation. In this coordinate system,
  // the positive z-axis is down toward Earth. Yaw is the angle between Sensor
  // x-axis and Earth magnetic North (or true North if corrected for local
  // declination, looking down on the sensor positive yaw is counterclockwise.
  // Pitch is angle between sensor x-axis and Earth ground plane, toward the
  // Earth is positive, up toward the sky is negative. Roll is angle between
  // sensor y-axis and Earth ground plane, y-axis up is positive roll. These
  // arise from the definition of the homogeneous rotation matrix constructed
  // from quaternions. Tait-Bryan angles as well as Euler angles are
  // non-commutative; that is, the get the correct orientation the rotations
  // must be applied in the correct order which for this configuration is yaw,
  // pitch, and then roll.
  // For more see
  // http://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles
  // which has additional links.

  myIMU.yaw   = atan2(2.0f * (*(getQ() + 1) * *(getQ() + 2) + *getQ()
                              * *(getQ() + 3)), *getQ() * *getQ() + * (getQ() + 1)
                      * *(getQ() + 1) - * (getQ() + 2) * *(getQ() + 2) - * (getQ() + 3)
                      * *(getQ() + 3));

  myIMU.pitch = -asin(2.0f * (*(getQ() + 1) * *(getQ() + 3) - *getQ()
                              * *(getQ() + 2)));

  myIMU.roll  = atan2(2.0f * (*getQ() * *(getQ() + 1) + * (getQ() + 2)
                              * *(getQ() + 3)), *getQ() * *getQ() - * (getQ() + 1)
                      * *(getQ() + 1) - * (getQ() + 2) * *(getQ() + 2) + * (getQ() + 3)
                      * *(getQ() + 3));

  myIMU.pitch *= RAD_TO_DEG;
  myIMU.yaw   *= RAD_TO_DEG;

  // Declination of SparkFun Electronics (40°05'26.6"N 105°11'05.9"W) is
  //   8° 30' E  ± 0° 21' (or 8.5°) on 2016-07-19
  // - http://www.ngdc.noaa.gov/geomag-web/#declination
  myIMU.yaw  -= 8.5;
  myIMU.roll *= RAD_TO_DEG;

  //Serial.print("Yaw: ");
  //Serial.print(myIMU.yaw, 2);
  //Serial.print(", ");
  //Serial.print("Pitch: ");
  //Serial.print(myIMU.pitch, 2);
  //Serial.print(", ");
  //Serial.print("Roll: ");
  //Serial.println(myIMU.roll, 2);

  //Serial.print("rate = ");
  //Serial.print((float)myIMU.sumCount / myIMU.sum, 2);
  //Serial.println(" Hz");

  //myIMU.count = millis();
  //myIMU.sumCount = 0;
  //myIMU.sum = 0;

  // subtract the last reading:
  totalRoll = totalRoll - readingsRoll[readIndexRoll];
  // read from the sensor:
  readingsRoll[readIndexRoll] = myIMU.roll;
  // add the reading to the total:
  totalRoll = totalRoll + readingsRoll[readIndexRoll];
  // advance to the next position in the array:
  readIndexRoll = readIndexRoll + 1;

  // if we're at the end of the array...
  if (readIndexRoll >= numReadings) {
    // ...wrap around to the beginning:
    readIndexRoll = 0;
  }

  // calculate the average:
  averageRoll = totalRoll / numReadings;
  // send it to the computer as ASCII digits
  //Serial.println(averageRoll);


  // subtract the last reading:
  totalPitch = totalPitch - readingsPitch[readIndexPitch];
  // read from the sensor:
  readingsPitch[readIndexPitch] = myIMU.pitch;
  // add the reading to the total:
  totalPitch = totalPitch + readingsPitch[readIndexPitch];
  // advance to the next position in the array:
  readIndexPitch = readIndexPitch + 1;

  // if we're at the end of the array...
  if (readIndexPitch >= numReadings) {
    // ...wrap around to the beginning:
    readIndexPitch = 0;
  }

  // calculate the average:
  averagePitch = totalPitch / numReadings;
  // send it to the computer as ASCII digits
  //Serial.println(averagePitch);



  // subtract the last reading:
  totalYaw = totalYaw - readingsYaw[readIndexYaw];
  // read from the sensor:
  readingsYaw[readIndexYaw] = myIMU.yaw;
  // add the reading to the total:
  totalYaw = totalYaw + readingsYaw[readIndexYaw];
  // advance to the next position in the array:
  readIndexYaw = readIndexYaw + 1;

  // if we're at the end of the array...
  if (readIndexYaw >= numReadings) {
    // ...wrap around to the beginning:
    readIndexYaw = 0;
  }

  // calculate the average:
  averageYaw = totalYaw / numReadings;
  // send it to the computer as ASCII digits
  //Serial.println(averageYaw);


  //SmoothingData---------------------------------


  gX =  String(averageYaw);
  gY =  String(averagePitch);
  gZ =  String(averageRoll);

  ue4Mesg = gX + " " + gY + " " + gZ;

  Serial.println(ue4Mesg);
  int str_len = ue4Mesg.length() + 1;

  ue4Mesg.toCharArray(ue4Buffer, str_len);
  // if there's data available, read a packet
  int packetSize = Udp.parsePacket();
  if (packetSize) {
    Serial.printf("Received packet of size %d from %s:%d\n    (to %s:%d, free heap = %d B)\n",
                  packetSize,
                  Udp.remoteIP().toString().c_str(), Udp.remotePort(),
                  Udp.destinationIP().toString().c_str(), Udp.localPort(),
                  ESP.getFreeHeap());

    // read the packet into packetBufffer
    int n = Udp.read(packetBuffer, UDP_TX_PACKET_MAX_SIZE);
    packetBuffer[n] = 0;
    Serial.println("Contents:");
    Serial.println(packetBuffer);

    // send a reply, to the IP address and port that sent us the packet we received
    Udp.beginPacket(Udp.remoteIP(), dest_port);
    Udp.write(ReplyBuffer);
    Udp.endPacket();
  }

  // send a reply, to the IP address and port that sent us the packet we received
  Udp.beginPacket(Udp.remoteIP(), dest_port);
  Udp.write(ue4Buffer);
  Udp.endPacket();
   digitalWrite(LED_BUILTIN, HIGH);   // turn the LED on (HIGH is the voltage level)
  delay(10);                       // wait for a second
  digitalWrite(LED_BUILTIN, LOW);    // turn the LED off by making the voltage LOW
  delay(10);                       // wait for a second
  
}